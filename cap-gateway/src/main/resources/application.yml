server:
  port: 9201
# 自定义url
#service-url:
#  user-service: http://localhost:8763

spring:
  redis:
    host: 192.168.0.168
    port: 6379
    database: 0
  application:
    name: cap-gateway
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.0.168:8848
    gateway:
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true
      routes:
        # - id: haha #路由的ID
        #   uri: ${service-url.user-service}/username #匹配后路由地址
        #   uri: http://www.baidu.com #匹配后路由地址
        #   predicates: # 断言，路径相匹配的进行路由
        #     - Path=/username
        - id: provider_route
          uri: lb://provider
          predicates: # 断言，路径相匹配的进行路由
            - Path=/resource
#            - Path=/username
          filters:
            - name: RequestTime
            - name: RequestRateLimiter
              args:
                # 用于限流的键的解析器的 Bean 对象的名字
                key-resolver: '#{@HostAddrKeyResolver}'
                # 令牌桶每秒填充速率
                redis-rate-limiter.replenishRate: 1
                # 令牌桶总容量
                redis-rate-limiter.burstCapacity: 3

        - id: consumer_route
          uri: lb://consumer
          predicates: # 断言，路径相匹配的进行路由
            - Path=/consumer/hi/**
          # StripPrefix 跳过Path的层级数，如StripPrefix=1时，上述path最终得到的重定向路由为/hi/**
          filters:
            - StripPrefix=1


